#!/usr/bin/python

import sys
import hal
import time
import serial


def send_to_teensy(addr, data):
    out_byte_0 = 0x00
    out_byte_1 = 0x80
    out_byte_2 = 0xc0

    addr &= 0x7
    data &= 0xffff

    out_byte_0 |= (addr << 4)
    out_byte_0 |= (data >> 12)

    out_byte_1 |= (data & 0x0fc0) >> 6

    out_byte_2 |= data & 0x003f

    #print "teensy: writing A=%d, D=0x%04x (0x%02x 0x%02x 0x%02x)" % (addr, data, out_byte_0, out_byte_1, out_byte_2)
    teensy.write(chr(out_byte_0))
    teensy.write(chr(out_byte_1))
    teensy.write(chr(out_byte_2))
    teensy.flush()


def send_pwm_to_teensy(channel):
    addr = channel + 2
    data = int(h['pwm_%d' % channel] * 0xff)
    send_to_teensy(addr, data)


# The hal pin is a float voltage.  The DAC has 12 bits of resolution, but
# we pretend it has 16 for future-proof-ness.
def send_dac_to_teensy(channel):
    max_voltage = 3.300

    addr = channel + 1

    requested_voltage = h['analog_out_%d' % channel]
    val = requested_voltage / max_voltage
    val *= 2**16

    data = int(val)
    if data < 0:
        data = 0
    if data >= 2**16:
        data = 2**16 - 1

    send_to_teensy(addr, data)


def handle_digital_inputs(data):
    h.digital_in_0 = (data >> 0) & 0x01
    h.digital_in_1 = (data >> 1) & 0x01
    h.digital_in_2 = (data >> 2) & 0x01
    h.digital_in_3 = (data >> 3) & 0x01
    h.digital_in_4 = (data >> 4) & 0x01
    h.digital_in_5 = (data >> 5) & 0x01
    h.digital_in_6 = (data >> 6) & 0x01


def handle_analog_in(channel, value):
    max_voltage = 3.300
    pin = "analog_in_%d" % channel
    h[pin] = (value * max_voltage) / 2**16


def handle_packet_from_teensy(buffer):
    addr = (buffer[0] & 0x70) >> 4
    data = (buffer[0] & 0x0f) << 12
    data |= (buffer[1] & 0x3f) << 6
    data |= (buffer[2] & 0x3f)

    #print "teensy: read A=%d, D=0x%04x (0x%02x 0x%02x 0x%02x)" % (addr, data, buffer[0], buffer[1], buffer[2])

    if addr == 0:
        handle_digital_inputs(data)
    elif addr == 1:
        handle_analog_in(0, data)
    elif addr == 2:
        handle_analog_in(1, data)
    else:
        print "unhandled address %d" % addr


def read_from_teensy():
    if not hasattr(read_from_teensy, "buffer"):
        read_from_teensy.buffer = bytearray()

    in_str = teensy.read(20)
    for in_chr in in_str:
        in_byte = ord(in_chr)
        if (in_byte & 0x80) == 0x00:
            read_from_teensy.buffer = bytearray()
            read_from_teensy.buffer.append(in_byte)

        elif ((in_byte & 0xc0) == 0x80) and (len(read_from_teensy.buffer) == 1):
            read_from_teensy.buffer.append(in_byte)

        elif ((in_byte & 0xc0) == 0xc0) and (len(read_from_teensy.buffer) == 2):
            read_from_teensy.buffer.append(in_byte)
            handle_packet_from_teensy(read_from_teensy.buffer)
            read_from_teensy.buffer = bytearray()

        else:
            # read an invalid byte
            print "discarding bogus packet"
            read_from_teensy.buffer = bytearray()


dev='/dev/ttyACM0'
if len(sys.argv) == 2:
    dev = sys.argv[1]

teensy = serial.Serial(port=dev, baudrate=9600, timeout=0.1)

h = hal.component('teensy')

h.newpin("led", hal.HAL_BIT, hal.HAL_IN)

h.newpin("digital_out_0", hal.HAL_BIT, hal.HAL_IN)
h.newpin("digital_out_1", hal.HAL_BIT, hal.HAL_IN)
h.newpin("digital_out_2", hal.HAL_BIT, hal.HAL_IN)
h.newpin("digital_out_3", hal.HAL_BIT, hal.HAL_IN)
h.newpin("digital_out_4", hal.HAL_BIT, hal.HAL_IN)
h.newpin("digital_out_5", hal.HAL_BIT, hal.HAL_IN)

h.newpin("analog_out_0", hal.HAL_FLOAT, hal.HAL_IN)

h.newpin("pwm_0", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("pwm_1", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("pwm_2", hal.HAL_FLOAT, hal.HAL_IN)
h.newpin("pwm_3", hal.HAL_FLOAT, hal.HAL_IN)

h.newpin("digital_in_0", hal.HAL_BIT, hal.HAL_OUT)
h.newpin("digital_in_1", hal.HAL_BIT, hal.HAL_OUT)
h.newpin("digital_in_2", hal.HAL_BIT, hal.HAL_OUT)
h.newpin("digital_in_3", hal.HAL_BIT, hal.HAL_OUT)
h.newpin("digital_in_4", hal.HAL_BIT, hal.HAL_OUT)
h.newpin("digital_in_5", hal.HAL_BIT, hal.HAL_OUT)
h.newpin("digital_in_6", hal.HAL_BIT, hal.HAL_OUT)

h.newpin("analog_in_0", hal.HAL_FLOAT, hal.HAL_OUT)
h.newpin("analog_in_1", hal.HAL_FLOAT, hal.HAL_OUT)

h.ready()

h.led = True
h.digital_out_0 = False
h.digital_out_1 = False
h.digital_out_2 = False
h.digital_out_3 = False
h.digital_out_4 = False
h.digital_out_5 = False
h.analog_out_0 = 0.0

h.pwm_0 = 0.0
h.pwm_1 = 0.0
h.pwm_2 = 0.0
h.pwm_3 = 0.0

written_dout = [True, True, True, True, True, True]
written_aout = [-9.9]
written_led = False
written_pwm = [ 1.0, 1.0, 1.0, 1.0 ]

try:
    while True:
        # digital outputs
        data = 0x0000
        do_write = False
        for pin in range(0, 6):
            if h['digital_out_%d' % pin] != written_dout[pin]:
                do_write = True
            data |= h['digital_out_%d' % pin] << pin
            written_dout[pin] = h['digital_out_%d' % pin]
        if h['led'] != written_led:
            do_write = True
        data |= h['led'] << 6
        written_led = h['led']
        if do_write:
            send_to_teensy(0, data)

        # analog outputs
        do_write = False
        if h['analog_out_0'] != written_aout[0]:
            do_write = True
        written_aout[0] = h['analog_out_0']
        if do_write:
            send_dac_to_teensy(0)

        # pwm outputs
        for pin in range(0, 4):
            if h['pwm_%d' % pin] != written_pwm[pin]:
                send_pwm_to_teensy(pin)
                written_pwm[pin] = h['pwm_%d' % pin]

        read_from_teensy()

except KeyboardInterrupt:
    print 'bye\n'
    teensy.close()
    h.exit()

